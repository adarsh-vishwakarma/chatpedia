// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Custom User model, with additional fields related to Stripe
model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String          @unique
  emailVerified          DateTime?
  image                  String?
  stripeCustomerId       String?         @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?         @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?         @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?       @map(name: "stripe_current_period_end")

  accounts               Account[]
  sessions               Session[]
  Authenticator          Authenticator[]

  File                   File[]
  Message                Message[]

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

// Account model for third-party login (e.g., Google, GitHub)
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// Session model for storing user session information
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// VerificationToken model for passwordless authentication
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Custom File model for user-uploaded files
enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id            String      @id @default(cuid())
  name          String
  uploadStatus  UploadStatus @default(PENDING)
  url           String
  key           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String
  User          User      @relation(fields: [userId], references: [id])

  messages      Message[]   // Relation to Message
}

// Custom Message model for storing user messages
model Message {
  id            String   @id @default(cuid())
  text          String   @db.Text()
  isUserMessage Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  User          User?    @relation(fields: [userId], references: [id])

  fileId        String?
  File          File?    @relation(fields: [fileId], references: [id])
}
